/* Generated by Yosys 0.56+186 (git sha1 83d953e95, x86_64-w64-mingw32-g++ 13.2.1 -O3) */

module counter(clk, rst_n, count);
  input clk;
  wire clk;
  input rst_n;
  wire rst_n;
  output [3:0] count;
  reg [3:0] count;
  wire _00_;
  wire _01_;
  wire [3:0] _02_;
  wire [3:0] _03_;
  assign _02_[0] = ~count[0];
  assign _00_ = ~(count[1] & count[0]);
  assign _03_[2] = ~(_00_ ^ count[2]);
  assign _01_ = _00_ | ~(count[2]);
  assign _03_[3] = ~(_01_ ^ count[3]);
  assign _03_[1] = count[1] ^ count[0];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count[0] <= 1'h0;
    else count[0] <= _02_[0];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count[1] <= 1'h0;
    else count[1] <= _03_[1];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count[2] <= 1'h0;
    else count[2] <= _03_[2];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count[3] <= 1'h0;
    else count[3] <= _03_[3];
  assign _02_[3:1] = count[3:1];
  assign _03_[0] = _02_[0];
endmodule
